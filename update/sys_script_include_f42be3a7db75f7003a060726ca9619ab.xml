<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_gq.GlobalQueueUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GlobalQueueUtil</name>
        <script><![CDATA[var GlobalQueueUtil = Class.create();
GlobalQueueUtil.prototype = {
    initialize: function(vTable) {
        var json = new global.JSON();

        //This section runs for st_references that are on a record that is being loaded, not when a st_reference is drilled into
        //         if (v_query.isGet() && typeof current != 'undefined') {
        //             //gs.info(11);
        //             //gs.info('typeof current: ' + typeof current + ':' + vTable);
        //             var id = v_query.getSysId() + '';
        //             var tbl = '';

        //             var flds = current.getElements();
        //             for (i in flds) {
        //                 if (flds[i] + '' == id) {
        //                     tbl = flds[i].getED().getName() + '';
        //                 }
        //             }
        //             //gs.info('tbl: ' + tbl);
        //             //tbl = 'cmdb_ci';
        //             var instance = current.instance;
        //             var epRec = new GlideRecord('x_snc_gq_endpoint');
        //             if (epRec.get('name', instance)) {
        //                 //gs.info('current.instance: ' + current.instance);
        //                 this.getRemote(epRec.url, tbl, 'sys_id=' + v_query.getSysId(), epRec.credential, [
        //                     ['name', 'string'],
        //                     ['payload', 'string'],
        //                     ['sys_id', 'guid']
        //                 ], epRec.name, vTable);

        //             }
        //             return;
        //         }


        //Get active fields from table.

        var encodedQuery = this.getSupersForQuery(vTable);
        //gs.info('encodedQuery: ' + encodedQuery);
        if (typeof encodedQuery == 'undefined') {
            gs.info('vTable' + vTable);
        }
        var fields = [];
        var ele = '';
        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery(encodedQuery);
        gr.addQuery('element!=collection');
        gr.addActiveQuery();
        gr.query();
        while (gr.next()) {
            ele = gr.element + '';
            if (ele != 'instance' && ele != 'sys_domain_path' && ele != 'task_for' && ele != 'sys_class_name' && ele != 'endpoint' && fields.indexOf(ele) == -1) {
                //gs.info('FIELD DATA: ' + ele + ':' + gr.internal_type.toLowerCase() + ':' + gr.reference);
                fields.push([ele, gr.internal_type.toLowerCase(), gr.reference + '']);
            }
        }

        //Get the remoteTable name, endpoints, credentials for them, and encoded query strings
        //Remote table we are connecting to
        var remoteTable;
        var endpoints = [];
        var condition;

        var ep = new GlideRecord('x_snc_gq_m2m_tables_endpoints');
        ep.addQuery('table.table', vTable);
        ep.query();
        while (ep.next()) {
            if (!remoteTable) {
                remoteTable = ep.table.remote_table + '';
            }

            if (!condition) {
                condition = this.parseCondition(ep.table.condition + '');
                //gs.info('ep.table.condition: ' + condition);
            }

            //For accessing single records via references.
            if (v_query.isGet()) {
                condition = 'sys_id=' + v_query.getSysId();
            }

            if (ep.endpoint.local) {
                //gs.info('ep.endpoint.local: ' + ep.endpoint.local);
                endpoints.push(['local', '', condition, ep.endpoint.name + '']);
            } else {
                endpoints.push([ep.endpoint.url + '', ep.endpoint.credential + '', condition, ep.endpoint.name + '']);
            }
        }

        var url;
        var epArr;
        var auth;
        var query;
        var endpointName;
        for (var i = 0; i < endpoints.length; i++) {
            epArr = endpoints[i];
            url = epArr[0] + '';
            query = epArr[2] + '';
            endpointName = epArr[3] + '';
            if (url != 'local') {
                auth = epArr[1] + '';
                //gs.info('getRemote: ' + url + ':' + remoteTable + ':' + query + ':' + auth + ':' + fields + ':' + endpointName + ':' + vTable);
                this.getRemote(url, remoteTable, query, auth, fields, endpointName, vTable);
            } else {
                this.getLocal(remoteTable, query, fields, endpointName);
            }
        }
    },

    getRemote: function(url, table, query, auth, fields, endpointName, vTable) {
        var endpoint = url + '/api/now/table/' + table;
        //gs.info('endpoint: ' + endpoint);
        var request = new sn_ws.RESTMessageV2();
        request.setEndpoint(endpoint);
        request.setHttpMethod('GET');
        request.setAuthenticationProfile("basic", auth);
        request.setRequestHeader("Accept", "application/json");
        request.setQueryParameter('sysparm_query', query);
        request.setQueryParameter('sysparm_display_value', 'all');

        var arr = [];
        for (m in fields) {
            arr.push(fields[m][0]);
        }

        request.setQueryParameter('sysparm_fields', arr.toString());



        var response = request.execute();
        var responseCode = response.getStatusCode();
        var responseBody = response.getBody();
        var json = new global.JSON();
        var result = json.decode(responseBody).result;

        var j;
        var rec = {};
        var row;

        for (j in result) {
            row = result[j];

            var k;
            var fieldArr;
            var field;
            var internalType;
            //var reference;
            for (k in fields) {
                fieldArr = fields[k];
                field = fieldArr[0] + '';
                internalType = fieldArr[1] + '';
                //reference = fieldArr[2] + '';
                //gs.info('FIELD: ' + field +':'+internalType + ':' + reference);
                if (row[field]) {
                    switch (internalType) {
                        case "string":
                            rec[field] = row[field].display_value;
                            break;
                        default:
                            rec[field] = row[field].value;
                    }
                }
            }

            rec.endpoint = url + table + '.do?sys_id=' + rec.sys_id;
            rec.instance = endpointName;

            //             if (vTable == 'x_snc_gq_st_reference') {
            //                 rec.payload = json.encode(result);
            //             }

            v_table.addRow(rec);

            //gs.info('REC: ' + json.encode(rec));
        }

    },

    getLocal: function(table, query, fields, endpointName) {
        var rec = {};
        var gr = new GlideRecord(table);
        gr.addQuery(query);
        gr.query();
        while (gr.next()) {
            var l;
            var fieldArr;
            var field;
            var internalType;
            for (l in fields) {
                fieldArr = fields[l];
                field = fieldArr[0] + '';
                internalType = fieldArr[1] + '';
                if (gr.isValidField(field)) {
                    switch (internalType) {
                        case "string":
                            rec[field] = gr[field].getDisplayValue();
                            break;
                        default:
                            rec[field] = gr[field];
                    }
                }
            }

            rec.endpoint = table + '.do?sys_id=' + gr.sys_id;
            rec.instance = endpointName;
            v_table.addRow(rec);
        }
    },

    parseCondition: function(tst) {
        var evaluator = new GlideScopedEvaluator();
        var dynID;
        var result;
        var re = /(DYNAMIC*)[^^]*/g; // 
        if (tst.match(re)) {
            var len = tst.match(re).length;
            for (var i = 0; i < len; i++) {
                try {
                    var mt = tst.match(re).pop();
                    script = mt + '';
                    dynID = script.substring(7, script.length);
                    var dyn = new GlideRecord('sys_filter_option_dynamic');
                    dyn.get(dynID);
                    result = evaluator.evaluateScript(dyn, 'script');
                    tst = tst.replace(mt, '=' + result);
                } finally{
					//nothing
				}
            }
        }
        return tst + '';
    },

    getSupersForQuery: function(vTable, arr) {
        if (typeof arr == 'undefined') {
            var arr = ['name=' + vTable + ''];
        }
        var dbo = new GlideRecord('sys_db_object');
        dbo.addQuery('name', vTable);
        dbo.addQuery('super_class!=');
        dbo.query();
        if (dbo.next()) {
            arr.push('^ORname=' + dbo.super_class.name + '');
            this.getSupersForQuery(dbo.super_class.name + '', arr);
            return arr.join('');
        }
        return arr.join('');
    },

    type: 'GlobalQueueUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-09 04:50:49</sys_created_on>
        <sys_id>f42be3a7db75f7003a060726ca9619ab</sys_id>
        <sys_mod_count>129</sys_mod_count>
        <sys_name>GlobalQueueUtil</sys_name>
        <sys_package display_value="Global Queue" source="x_snc_gq">526aea5adb31b3003a060726ca96193e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Global Queue">526aea5adb31b3003a060726ca96193e</sys_scope>
        <sys_update_name>sys_script_include_f42be3a7db75f7003a060726ca9619ab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-23 17:36:31</sys_updated_on>
    </sys_script_include>
</record_update>
